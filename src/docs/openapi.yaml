openapi: 3.0.0
info:
  title: Task API
  description: API REST para gestionar tareas y usuarios
  version: 1.1.0
servers:
  - url: http://localhost:4000/api

paths:
  /tasks:
    get:
      summary: Obtener todas las tareas del usuario logueado
      tags: [Tasks]
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Lista de tareas
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Task"

    post:
      summary: Crear una nueva tarea
      tags: [Tasks]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskInput"
      responses:
        "201":
          description: Tarea creada
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"

  /tasks/{id}:
    put:
      summary: Actualizar una tarea
      tags: [Tasks]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskInput"
      responses:
        "200":
          description: Tarea actualizada
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"

    delete:
      summary: Eliminar una tarea permanentemente
      tags: [Tasks]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Tarea eliminada

    patch:
      summary: Mover tarea a papelera (soft delete)
      tags: [Tasks]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Tarea deshechada
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Tarea deshechada"

  /auth/register:
    post:
      summary: Registrar nuevo usuario
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserInput"
      responses:
        "201":
          description: Usuario registrado exitosamente
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"

  /auth/login:
    post:
      summary: Login de usuario
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserInput"
      responses:
        "200":
          description: Login exitoso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Task:
      type: object
      properties:
        id:
          type: string
          example: 64d8f1b2c0e5f20012a34bcd
        titulo:
          type: string
          example: Comprar pan
        descripcion:
          type: string
          example: Ir a la panader√≠a de la esquina
        hecha:
          type: boolean
          example: false
        active:
          type: boolean
          example: true

    TaskInput:
      type: object
      properties:
        titulo:
          type: string
        descripcion:
          type: string
        hecha:
          type: boolean
        active:
          type: boolean
      required:
        - titulo
        - descripcion

    UserInput:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
      required:
        - email
        - password

    AuthResponse:
      type: object
      properties:
        message:
          type: string
          example: "Login exitoso"
        user:
          type: object
          properties:
            id:
              type: string
              example: 64d8f1b2c0e5f20012a34bcd
            email:
              type: string
              example: usuario@correo.com
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
